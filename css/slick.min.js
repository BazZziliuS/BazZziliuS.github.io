(function (a) {
    "use strict";

    if (typeof define == "function" && define.amd) {
        define(["jquery"], a);
    } else if (typeof exports != "undefined") {
        module.exports = a(require("jquery"));
    } else {
        a(jQuery);
    }
})(function (b) {
    "use strict";

    var a = window.Slick || {};
    (a = function () {
        var a = 0;
        return function (c, d) {
            var e;
            var f = this;
            f.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: b(c),
                appendDots: b(c),
                arrows: true,
                asNavFor: null,
                prevArrow: "<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>",
                nextArrow: "<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>",
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: "50px",
                cssEase: "ease",
                customPaging: function (a, c) {
                    return b("<button type=\"button\" />").text(c + 1);
                },
                dots: false,
                dotsClass: "slick-dots",
                draggable: true,
                easing: "linear",
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: "ondemand",
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: "window",
                responsive: null,
                rows: 1,
                rtl: false,
                slide: "",
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };
            f.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };
            b.extend(f, f.initials);
            f.activeBreakpoint = null;
            f.animType = null;
            f.animProp = null;
            f.breakpoints = [];
            f.breakpointSettings = [];
            f.cssTransitions = false;
            f.focussed = false;
            f.interrupted = false;
            f.hidden = "hidden";
            f.paused = true;
            f.positionProp = null;
            f.respondTo = null;
            f.rowCount = 1;
            f.shouldClick = true;
            f.$slider = b(c);
            f.$slidesCache = null;
            f.transformType = null;
            f.transitionType = null;
            f.visibilityChange = "visibilitychange";
            f.windowWidth = 0;
            f.windowTimer = null;
            e = b(c).data("slick") || {};
            f.options = b.extend({}, f.defaults, d, e);
            f.currentSlide = f.options.initialSlide;
            f.originalSettings = f.options;
            if (document.mozHidden !== undefined) {
                f.hidden = "mozHidden";
                f.visibilityChange = "mozvisibilitychange";
            } else if (document.webkitHidden !== undefined) {
                f.hidden = "webkitHidden";
                f.visibilityChange = "webkitvisibilitychange";
            }
            f.autoPlay = b.proxy(f.autoPlay, f);
            f.autoPlayClear = b.proxy(f.autoPlayClear, f);
            f.autoPlayIterator = b.proxy(f.autoPlayIterator, f);
            f.changeSlide = b.proxy(f.changeSlide, f);
            f.clickHandler = b.proxy(f.clickHandler, f);
            f.selectHandler = b.proxy(f.selectHandler, f);
            f.setPosition = b.proxy(f.setPosition, f);
            f.swipeHandler = b.proxy(f.swipeHandler, f);
            f.dragHandler = b.proxy(f.dragHandler, f);
            f.keyHandler = b.proxy(f.keyHandler, f);
            f.instanceUid = a++;
            f.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
            f.registerBreakpoints();
            f.init(true);
        };
    }()).prototype.activateADA = function () {
        this.$slideTrack.find(".slick-active").attr({
            "aria-hidden": "false"
        }).find("a, input, button, select").attr({
            tabindex: "0"
        });
    };
    a.prototype.addSlide = a.prototype.slickAdd = function (a, c, d) {
        var e = this;
        if (typeof c == "boolean") {
            d = c;
            c = null;
        } else if (c < 0 || c >= e.slideCount) {
            return false;
        }
        e.unload();
        if (typeof c == "number") {
            if (c === 0 && e.$slides.length === 0) {
                b(a).appendTo(e.$slideTrack);
            } else if (d) {
                b(a).insertBefore(e.$slides.eq(c));
            } else {
                b(a).insertAfter(e.$slides.eq(c));
            }
        } else if (d === true) {
            b(a).prependTo(e.$slideTrack);
        } else {
            b(a).appendTo(e.$slideTrack);
        }
        e.$slides = e.$slideTrack.children(this.options.slide);
        e.$slideTrack.children(this.options.slide).detach();
        e.$slideTrack.append(e.$slides);
        e.$slides.each(function (a, c) {
            b(c).attr("data-slick-index", a);
        });
        e.$slidesCache = e.$slides;
        e.reinit();
    };
    a.prototype.animateHeight = function () {
        var a = this;
        if (a.options.slidesToShow === 1 && a.options.adaptiveHeight === true && a.options.vertical === false) {
            var b = a.$slides.eq(a.currentSlide).outerHeight(true);
            a.$list.animate({
                height: b
            }, a.options.speed);
        }
    };
    a.prototype.animateSlide = function (a, c) {
        var d = {};
        var f = this;
        f.animateHeight();
        if (f.options.rtl === true && f.options.vertical === false) {
            a = -a;
        }
        if (f.transformsEnabled === false) {
            if (f.options.vertical === false) {
                f.$slideTrack.animate({
                    left: a
                }, f.options.speed, f.options.easing, c);
            } else {
                f.$slideTrack.animate({
                    top: a
                }, f.options.speed, f.options.easing, c);
            }
        } else if (f.cssTransitions === false) {
            if (f.options.rtl === true) {
                f.currentLeft = -f.currentLeft;
            }
            b({
                animStart: f.currentLeft
            }).animate({
                animStart: a
            }, {
                duration: f.options.speed,
                easing: f.options.easing,
                step: function (a) {
                    a = Math.ceil(a);
                    if (f.options.vertical === false) {
                        d[f.animType] = "translate(" + a + "px, 0px)";
                        f.$slideTrack.css(d);
                    } else {
                        d[f.animType] = "translate(0px," + a + "px)";
                        f.$slideTrack.css(d);
                    }
                },
                complete: function () {
                    if (c) {
                        c.call();
                    }
                }
            });
        } else {
            f.applyTransition();
            a = Math.ceil(a);
            if (f.options.vertical === false) {
                d[f.animType] = "translate3d(" + a + "px, 0px, 0px)";
            } else {
                d[f.animType] = "translate3d(0px," + a + "px, 0px)";
            }
            f.$slideTrack.css(d);
            if (c) {
                // TOLOOK
                setTimeout(function () {
                    f.disableTransition();
                    c.call();
                }, f.options.speed);
            }
        }
    };
    a.prototype.getNavTarget = function () {
        var a = this;
        var c = a.options.asNavFor;
        if (c && c !== null) {
            c = b(c).not(a.$slider);
        }
        return c;
    };
    a.prototype.asNavFor = function (a) {
        var c = this.getNavTarget();
        if (c !== null && typeof c == "object") {
            c.each(function () {
                var c = b(this).slick("getSlick");
                if (!c.unslicked) {
                    c.slideHandler(a, true);
                }
            });
        }
    };
    a.prototype.applyTransition = function (a) {
        var b = this;
        var c = {};
        if (b.options.fade === false) {
            c[b.transitionType] = b.transformType + " " + b.options.speed + "ms " + b.options.cssEase;
        } else {
            c[b.transitionType] = "opacity " + b.options.speed + "ms " + b.options.cssEase;
        }
        if (b.options.fade === false) {
            b.$slideTrack.css(c);
        } else {
            b.$slides.eq(a).css(c);
        }
    };
    a.prototype.autoPlay = function () {
        var a = this;
        a.autoPlayClear();
        if (a.slideCount > a.options.slidesToShow) {
            a.autoPlayTimer = // TOLOOK
                setInterval(a.autoPlayIterator, a.options.autoplaySpeed);
        }
    };
    a.prototype.autoPlayClear = function () {
        var a = this;
        if (a.autoPlayTimer) {
            clearInterval(a.autoPlayTimer);
        }
    };
    a.prototype.autoPlayIterator = function () {
        var a = this;
        var b = a.currentSlide + a.options.slidesToScroll;
        if (!(a.paused || a.interrupted || a.focussed)) {
            if (a.options.infinite === false) {
                if (a.direction === 1 && a.currentSlide + 1 === a.slideCount - 1) {
                    a.direction = 0;
                } else if (a.direction === 0) {
                    b = a.currentSlide - a.options.slidesToScroll;
                    if (a.currentSlide - 1 == 0) {
                        a.direction = 1;
                    }
                }
            }
            a.slideHandler(b);
        }
    };
    a.prototype.buildArrows = function () {
        var a = this;
        if (a.options.arrows === true) {
            a.$prevArrow = b(a.options.prevArrow).addClass("slick-arrow");
            a.$nextArrow = b(a.options.nextArrow).addClass("slick-arrow");
            if (a.slideCount > a.options.slidesToShow) {
                a.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                a.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
                if (a.htmlExpr.test(a.options.prevArrow)) {
                    a.$prevArrow.prependTo(a.options.appendArrows);
                }
                if (a.htmlExpr.test(a.options.nextArrow)) {
                    a.$nextArrow.appendTo(a.options.appendArrows);
                }
                if (a.options.infinite !== true) {
                    a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                }
            } else {
                a.$prevArrow.add(a.$nextArrow).addClass("slick-hidden").attr({
                    "aria-disabled": "true",
                    tabindex: "-1"
                });
            }
        }
    };
    a.prototype.buildDots = function () {
        var a;
        var c;
        var d = this;
        if (d.options.dots === true) {
            d.$slider.addClass("slick-dotted");
            c = b("<ul />").addClass(d.options.dotsClass);
            a = 0;
            for (; a <= d.getDotCount(); a += 1) {
                c.append(b("<li />").append(d.options.customPaging.call(this, d, a)));
            }
            d.$dots = c.appendTo(d.options.appendDots);
            d.$dots.find("li").first().addClass("slick-active");
        }
    };
    a.prototype.buildOut = function () {
        var a = this;
        a.$slides = a.$slider.children(a.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
        a.slideCount = a.$slides.length;
        a.$slides.each(function (a, c) {
            b(c).attr("data-slick-index", a).data("originalStyling", b(c).attr("style") || "");
        });
        a.$slider.addClass("slick-slider");
        a.$slideTrack = a.slideCount === 0 ? b("<div class=\"slick-track\"/>").appendTo(a.$slider) : a.$slides.wrapAll("<div class=\"slick-track\"/>").parent();
        a.$list = a.$slideTrack.wrap("<div class=\"slick-list\"/>").parent();
        a.$slideTrack.css("opacity", 0);
        if (!(a.options.centerMode !== true && a.options.swipeToSlide !== true)) {
            a.options.slidesToScroll = 1;
        }
        b("img[data-lazy]", a.$slider).not("[src]").addClass("slick-loading");
        a.setupInfinite();
        a.buildArrows();
        a.buildDots();
        a.updateDots();
        a.setSlideClasses(typeof a.currentSlide == "number" ? a.currentSlide : 0);
        if (a.options.draggable === true) {
            a.$list.addClass("draggable");
        }
    };
    a.prototype.buildRows = function () {
        var b;
        var f;
        var g;
        var h;
        var j;
        var k;
        var m;
        var p = this;
        h = document.createDocumentFragment();
        k = p.$slider.children();
        if (p.options.rows > 1) {
            m = p.options.slidesPerRow * p.options.rows;
            j = Math.ceil(k.length / m);
            b = 0;
            for (; b < j; b++) {
                var l = document.createElement("div");
                for (f = 0; f < p.options.rows; f++) {
                    var q = document.createElement("div");
                    for (g = 0; g < p.options.slidesPerRow; g++) {
                        var u = b * m + (f * p.options.slidesPerRow + g);
                        if (k.get(u)) {
                            q.appendChild(k.get(u));
                        }
                    }
                    l.appendChild(q);
                }
                h.appendChild(l);
            }
            p.$slider.empty().append(h);
            p.$slider.children().children().children().css({
                width: 100 / p.options.slidesPerRow + "%",
                display: "inline-block"
            });
        }
    };
    a.prototype.checkResponsive = function (c, e) {
        var f;
        var g;
        var h;
        var i = this;
        var j = false;
        var k = i.$slider.width();
        var d = window.innerWidth || b(window).width();
        if (i.respondTo === "window") {
            h = d;
        } else if (i.respondTo === "slider") {
            h = k;
        } else if (i.respondTo === "min") {
            h = Math.min(d, k);
        }
        if (i.options.responsive && i.options.responsive.length && i.options.responsive !== null) {
            g = null;
            for (f in i.breakpoints) {
                if (i.breakpoints.hasOwnProperty(f)) {
                    if (i.originalSettings.mobileFirst === false) {
                        if (h < i.breakpoints[f]) {
                            g = i.breakpoints[f];
                        }
                    } else if (h > i.breakpoints[f]) {
                        g = i.breakpoints[f];
                    }
                }
            }
            if (g !== null) {
                if (i.activeBreakpoint !== null) {
                    if (g !== i.activeBreakpoint || e) {
                        i.activeBreakpoint = g;
                        if (i.breakpointSettings[g] === "unslick") {
                            i.unslick(g);
                        } else {
                            i.options = b.extend({}, i.originalSettings, i.breakpointSettings[g]);
                            if (c === true) {
                                i.currentSlide = i.options.initialSlide;
                            }
                            i.refresh(c);
                        }
                        j = g;
                    }
                } else {
                    i.activeBreakpoint = g;
                    if (i.breakpointSettings[g] === "unslick") {
                        i.unslick(g);
                    } else {
                        i.options = b.extend({}, i.originalSettings, i.breakpointSettings[g]);
                        if (c === true) {
                            i.currentSlide = i.options.initialSlide;
                        }
                        i.refresh(c);
                    }
                    j = g;
                }
            } else if (i.activeBreakpoint !== null) {
                i.activeBreakpoint = null;
                i.options = i.originalSettings;
                if (c === true) {
                    i.currentSlide = i.options.initialSlide;
                }
                i.refresh(c);
                j = g;
            }
            if (!(c || j === false)) {
                i.$slider.trigger("breakpoint", [i, j]);
            }
        }
    };
    a.prototype.changeSlide = function (a, c) {
        var e;
        var f;
        var g;
        var h = this;
        var i = b(a.currentTarget);
        if (i.is("a")) {
            a.preventDefault();
        }
        if (!i.is("li")) {
            i = i.closest("li");
        }
        g = h.slideCount % h.options.slidesToScroll != 0;
        e = g ? 0 : (h.slideCount - h.currentSlide) % h.options.slidesToScroll;
        switch (a.data.message) {
            case "previous":
                f = e === 0 ? h.options.slidesToScroll : h.options.slidesToShow - e;
                if (h.slideCount > h.options.slidesToShow) {
                    h.slideHandler(h.currentSlide - f, false, c);
                }
                break;
            case "next":
                f = e === 0 ? h.options.slidesToScroll : e;
                if (h.slideCount > h.options.slidesToShow) {
                    h.slideHandler(h.currentSlide + f, false, c);
                }
                break;
            case "index":
                var j = a.data.index === 0 ? 0 : a.data.index || i.index() * h.options.slidesToScroll;
                h.slideHandler(h.checkNavigable(j), false, c);
                i.children().trigger("focus");
                break;
            default:
                return;
        }
    };
    a.prototype.checkNavigable = function (a) {
        var b;
        var c;
        b = this.getNavigableIndexes();
        c = 0;
        if (a > b[b.length - 1]) {
            a = b[b.length - 1];
        } else {
            for (var d in b) {
                if (a < b[d]) {
                    a = c;
                    break;
                }
                c = b[d];
            }
        }
        return a;
    };
    a.prototype.cleanUpEvents = function () {
        var a = this;
        if (a.options.dots && a.$dots !== null) {
            b("li", a.$dots).off("click.slick", a.changeSlide).off("mouseenter.slick", b.proxy(a.interrupt, a, true)).off("mouseleave.slick", b.proxy(a.interrupt, a, false));
            if (a.options.accessibility === true) {
                a.$dots.off("keydown.slick", a.keyHandler);
            }
        }
        a.$slider.off("focus.slick blur.slick");
        if (a.options.arrows === true && a.slideCount > a.options.slidesToShow) {
            if (a.$prevArrow) {
                a.$prevArrow.off("click.slick", a.changeSlide);
            }
            if (a.$nextArrow) {
                a.$nextArrow.off("click.slick", a.changeSlide);
            }
            if (a.options.accessibility === true) {
                if (a.$prevArrow) {
                    a.$prevArrow.off("keydown.slick", a.keyHandler);
                }
                if (a.$nextArrow) {
                    a.$nextArrow.off("keydown.slick", a.keyHandler);
                }
            }
        }
        a.$list.off("touchstart.slick mousedown.slick", a.swipeHandler);
        a.$list.off("touchmove.slick mousemove.slick", a.swipeHandler);
        a.$list.off("touchend.slick mouseup.slick", a.swipeHandler);
        a.$list.off("touchcancel.slick mouseleave.slick", a.swipeHandler);
        a.$list.off("click.slick", a.clickHandler);
        b(document).off(a.visibilityChange, a.visibility);
        a.cleanUpSlideEvents();
        if (a.options.accessibility === true) {
            a.$list.off("keydown.slick", a.keyHandler);
        }
        if (a.options.focusOnSelect === true) {
            b(a.$slideTrack).children().off("click.slick", a.selectHandler);
        }
        b(window).off("orientationchange.slick.slick-" + a.instanceUid, a.orientationChange);
        b(window).off("resize.slick.slick-" + a.instanceUid, a.resize);
        b("[draggable!=true]", a.$slideTrack).off("dragstart", a.preventDefault);
        b(window).off("load.slick.slick-" + a.instanceUid, a.setPosition);
    };
    a.prototype.cleanUpSlideEvents = function () {
        var a = this;
        a.$list.off("mouseenter.slick", b.proxy(a.interrupt, a, true));
        a.$list.off("mouseleave.slick", b.proxy(a.interrupt, a, false));
    };
    a.prototype.cleanUpRows = function () {
        var a;
        var b = this;
        if (b.options.rows > 1) {
            (a = b.$slides.children().children()).removeAttr("style");
            b.$slider.empty().append(a);
        }
    };
    a.prototype.clickHandler = function (a) {
        if (this.shouldClick === false) {
            a.stopImmediatePropagation();
            a.stopPropagation();
            a.preventDefault();
        }
    };
    a.prototype.destroy = function (a) {
        var c = this;
        c.autoPlayClear();
        c.touchObject = {};
        c.cleanUpEvents();
        b(".slick-cloned", c.$slider).detach();
        if (c.$dots) {
            c.$dots.remove();
        }
        if (c.$prevArrow && c.$prevArrow.length) {
            c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (c.htmlExpr.test(c.options.prevArrow)) {
                c.$prevArrow.remove();
            }
        }
        if (c.$nextArrow && c.$nextArrow.length) {
            c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
            if (c.htmlExpr.test(c.options.nextArrow)) {
                c.$nextArrow.remove();
            }
        }
        if (c.$slides) {
            c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
                b(this).attr("style", b(this).data("originalStyling"));
            });
            c.$slideTrack.children(this.options.slide).detach();
            c.$slideTrack.detach();
            c.$list.detach();
            c.$slider.append(c.$slides);
        }
        c.cleanUpRows();
        c.$slider.removeClass("slick-slider");
        c.$slider.removeClass("slick-initialized");
        c.$slider.removeClass("slick-dotted");
        c.unslicked = true;
        if (!a) {
            c.$slider.trigger("destroy", [c]);
        }
    };
    a.prototype.disableTransition = function (a) {
        var b = this;
        var c = {
            [b.transitionType]: ""
        };
        if (b.options.fade === false) {
            b.$slideTrack.css(c);
        } else {
            b.$slides.eq(a).css(c);
        }
    };
    a.prototype.fadeSlide = function (a, b) {
        var c = this;
        if (c.cssTransitions === false) {
            c.$slides.eq(a).css({
                zIndex: c.options.zIndex
            });
            c.$slides.eq(a).animate({
                opacity: 1
            }, c.options.speed, c.options.easing, b);
        } else {
            c.applyTransition(a);
            c.$slides.eq(a).css({
                opacity: 1,
                zIndex: c.options.zIndex
            });
            if (b) {
                // TOLOOK
                setTimeout(function () {
                    c.disableTransition(a);
                    b.call();
                }, c.options.speed);
            }
        }
    };
    a.prototype.fadeSlideOut = function (a) {
        var b = this;
        if (b.cssTransitions === false) {
            b.$slides.eq(a).animate({
                opacity: 0,
                zIndex: b.options.zIndex - 2
            }, b.options.speed, b.options.easing);
        } else {
            b.applyTransition(a);
            b.$slides.eq(a).css({
                opacity: 0,
                zIndex: b.options.zIndex - 2
            });
        }
    };
    a.prototype.filterSlides = a.prototype.slickFilter = function (a) {
        var b = this;
        if (a !== null) {
            b.$slidesCache = b.$slides;
            b.unload();
            b.$slideTrack.children(this.options.slide).detach();
            b.$slidesCache.filter(a).appendTo(b.$slideTrack);
            b.reinit();
        }
    };
    a.prototype.focusHandler = function () {
        var a = this;
        a.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function (c) {
            c.stopImmediatePropagation();
            var d = b(this);
            // TOLOOK
            setTimeout(function () {
                if (a.options.pauseOnFocus) {
                    a.focussed = d.is(":focus");
                    a.autoPlay();
                }
            }, 0);
        });
    };
    a.prototype.getCurrent = a.prototype.slickCurrentSlide = function () {
        return this.currentSlide;
    };
    a.prototype.getDotCount = function () {
        var a = this;
        var b = 0;
        var c = 0;
        var d = 0;
        if (a.options.infinite === true) {
            if (a.slideCount <= a.options.slidesToShow) {
                ++d;
            } else {
                for (; b < a.slideCount;) {
                    ++d;
                    b = c + a.options.slidesToScroll;
                    c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
                }
            }
        } else if (a.options.centerMode === true) {
            d = a.slideCount;
        } else if (a.options.asNavFor) {
            for (; b < a.slideCount;) {
                ++d;
                b = c + a.options.slidesToScroll;
                c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
            }
        } else {
            d = 1 + Math.ceil((a.slideCount - a.options.slidesToShow) / a.options.slidesToScroll);
        }
        return d - 1;
    };
    a.prototype.getLeft = function (a) {
        var b;
        var c;
        var d;
        var f;
        var g = this;
        var h = 0;
        g.slideOffset = 0;
        c = g.$slides.first().outerHeight(true);
        if (g.options.infinite === true) {
            if (g.slideCount > g.options.slidesToShow) {
                g.slideOffset = g.slideWidth * g.options.slidesToShow * -1;
                f = -1;
                if (g.options.vertical === true && g.options.centerMode === true) {
                    if (g.options.slidesToShow === 2) {
                        f = -1.5;
                    } else if (g.options.slidesToShow === 1) {
                        f = -2;
                    }
                }
                h = c * g.options.slidesToShow * f;
            }
            if (g.slideCount % g.options.slidesToScroll != 0 && a + g.options.slidesToScroll > g.slideCount && g.slideCount > g.options.slidesToShow) {
                if (a > g.slideCount) {
                    g.slideOffset = (g.options.slidesToShow - (a - g.slideCount)) * g.slideWidth * -1;
                    h = (g.options.slidesToShow - (a - g.slideCount)) * c * -1;
                } else {
                    g.slideOffset = g.slideCount % g.options.slidesToScroll * g.slideWidth * -1;
                    h = g.slideCount % g.options.slidesToScroll * c * -1;
                }
            }
        } else if (a + g.options.slidesToShow > g.slideCount) {
            g.slideOffset = (a + g.options.slidesToShow - g.slideCount) * g.slideWidth;
            h = (a + g.options.slidesToShow - g.slideCount) * c;
        }
        if (g.slideCount <= g.options.slidesToShow) {
            g.slideOffset = 0;
            h = 0;
        }
        if (g.options.centerMode === true && g.slideCount <= g.options.slidesToShow) {
            g.slideOffset = g.slideWidth * Math.floor(g.options.slidesToShow) / 2 - g.slideWidth * g.slideCount / 2;
        } else if (g.options.centerMode === true && g.options.infinite === true) {
            g.slideOffset += g.slideWidth * Math.floor(g.options.slidesToShow / 2) - g.slideWidth;
        } else if (g.options.centerMode === true) {
            g.slideOffset = 0;
            g.slideOffset += g.slideWidth * Math.floor(g.options.slidesToShow / 2);
        }
        b = g.options.vertical === false ? a * g.slideWidth * -1 + g.slideOffset : a * c * -1 + h;
        if (g.options.variableWidth === true) {
            d = g.slideCount <= g.options.slidesToShow || g.options.infinite === false ? g.$slideTrack.children(".slick-slide").eq(a) : g.$slideTrack.children(".slick-slide").eq(a + g.options.slidesToShow);
            b = g.options.rtl === true ? d[0] ? (g.$slideTrack.width() - d[0].offsetLeft - d.width()) * -1 : 0 : d[0] ? d[0].offsetLeft * -1 : 0;
            if (g.options.centerMode === true) {
                d = g.slideCount <= g.options.slidesToShow || g.options.infinite === false ? g.$slideTrack.children(".slick-slide").eq(a) : g.$slideTrack.children(".slick-slide").eq(a + g.options.slidesToShow + 1);
                b = g.options.rtl === true ? d[0] ? (g.$slideTrack.width() - d[0].offsetLeft - d.width()) * -1 : 0 : d[0] ? d[0].offsetLeft * -1 : 0;
                b += (g.$list.width() - d.outerWidth()) / 2;
            }
        }
        return b;
    };
    a.prototype.getOption = a.prototype.slickGetOption = function (a) {
        return this.options[a];
    };
    a.prototype.getNavigableIndexes = function () {
        var a;
        var b = this;
        var c = 0;
        var d = 0;
        var e = [];
        for (b.options.infinite === false ? a = b.slideCount : (c = b.options.slidesToScroll * -1, d = b.options.slidesToScroll * -1, a = b.slideCount * 2); c < a;) {
            e.push(c);
            c = d + b.options.slidesToScroll;
            d += b.options.slidesToScroll <= b.options.slidesToShow ? b.options.slidesToScroll : b.options.slidesToShow;
        }
        return e;
    };
    a.prototype.getSlick = function () {
        return this;
    };
    a.prototype.getSlideCount = function () {
        var a;
        var c;
        var d = this;
        c = d.options.centerMode === true ? d.slideWidth * Math.floor(d.options.slidesToShow / 2) : 0;
        if (d.options.swipeToSlide === true) {
            d.$slideTrack.find(".slick-slide").each(function (e, f) {
                if (f.offsetLeft - c + b(f).outerWidth() / 2 > d.swipeLeft * -1) {
                    a = f;
                    return false;
                }
            });
            return Math.abs(b(a).attr("data-slick-index") - d.currentSlide) || 1;
        } else {
            return d.options.slidesToScroll;
        }
    };
    a.prototype.goTo = a.prototype.slickGoTo = function (a, b) {
        this.changeSlide({
            data: {
                message: "index",
                index: parseInt(a)
            }
        }, b);
    };
    a.prototype.init = function (a) {
        var c = this;
        if (!b(c.$slider).hasClass("slick-initialized")) {
            b(c.$slider).addClass("slick-initialized");
            c.buildRows();
            c.buildOut();
            c.setProps();
            c.startLoad();
            c.loadSlider();
            c.initializeEvents();
            c.updateArrows();
            c.updateDots();
            c.checkResponsive(true);
            c.focusHandler();
        }
        if (a) {
            c.$slider.trigger("init", [c]);
        }
        if (c.options.accessibility === true) {
            c.initADA();
        }
        if (c.options.autoplay) {
            c.paused = false;
            c.autoPlay();
        }
    };
    a.prototype.initADA = function () {
        var a = this;
        var c = Math.ceil(a.slideCount / a.options.slidesToShow);
        var d = a.getNavigableIndexes().filter(function (b) {
            return b >= 0 && b < a.slideCount;
        });
        a.$slides.add(a.$slideTrack.find(".slick-cloned")).attr({
            "aria-hidden": "true",
            tabindex: "-1"
        }).find("a, input, button, select").attr({
            tabindex: "-1"
        });
        if (a.$dots !== null) {
            a.$slides.not(a.$slideTrack.find(".slick-cloned")).each(function (c) {
                var e = d.indexOf(c);
                b(this).attr({
                    role: "tabpanel",
                    id: "slick-slide" + a.instanceUid + c,
                    tabindex: -1
                });
                if (e !== -1) {
                    b(this).attr({
                        "aria-describedby": "slick-slide-control" + a.instanceUid + e
                    });
                }
            });
            a.$dots.attr("role", "tablist").find("li").each(function (e) {
                var f = d[e];
                b(this).attr({
                    role: "presentation"
                });
                b(this).find("button").first().attr({
                    role: "tab",
                    id: "slick-slide-control" + a.instanceUid + e,
                    "aria-controls": "slick-slide" + a.instanceUid + f,
                    "aria-label": e + 1 + " of " + c,
                    "aria-selected": null,
                    tabindex: "-1"
                });
            }).eq(a.currentSlide).find("button").attr({
                "aria-selected": "true",
                tabindex: "0"
            }).end();
        }
        for (var e = a.currentSlide, f = e + a.options.slidesToShow; e < f; e++) {
            a.$slides.eq(e).attr("tabindex", 0);
        }
        a.activateADA();
    };
    a.prototype.initArrowEvents = function () {
        var a = this;
        if (a.options.arrows === true && a.slideCount > a.options.slidesToShow) {
            a.$prevArrow.off("click.slick").on("click.slick", {
                message: "previous"
            }, a.changeSlide);
            a.$nextArrow.off("click.slick").on("click.slick", {
                message: "next"
            }, a.changeSlide);
            if (a.options.accessibility === true) {
                a.$prevArrow.on("keydown.slick", a.keyHandler);
                a.$nextArrow.on("keydown.slick", a.keyHandler);
            }
        }
    };
    a.prototype.initDotEvents = function () {
        var a = this;
        if (a.options.dots === true) {
            b("li", a.$dots).on("click.slick", {
                message: "index"
            }, a.changeSlide);
            if (a.options.accessibility === true) {
                a.$dots.on("keydown.slick", a.keyHandler);
            }
        }
        if (a.options.dots === true && a.options.pauseOnDotsHover === true) {
            b("li", a.$dots).on("mouseenter.slick", b.proxy(a.interrupt, a, true)).on("mouseleave.slick", b.proxy(a.interrupt, a, false));
        }
    };
    a.prototype.initSlideEvents = function () {
        var a = this;
        if (a.options.pauseOnHover) {
            a.$list.on("mouseenter.slick", b.proxy(a.interrupt, a, true));
            a.$list.on("mouseleave.slick", b.proxy(a.interrupt, a, false));
        }
    };
    a.prototype.initializeEvents = function () {
        var a = this;
        a.initArrowEvents();
        a.initDotEvents();
        a.initSlideEvents();
        a.$list.on("touchstart.slick mousedown.slick", {
            action: "start"
        }, a.swipeHandler);
        a.$list.on("touchmove.slick mousemove.slick", {
            action: "move"
        }, a.swipeHandler);
        a.$list.on("touchend.slick mouseup.slick", {
            action: "end"
        }, a.swipeHandler);
        a.$list.on("touchcancel.slick mouseleave.slick", {
            action: "end"
        }, a.swipeHandler);
        a.$list.on("click.slick", a.clickHandler);
        b(document).on(a.visibilityChange, b.proxy(a.visibility, a));
        if (a.options.accessibility === true) {
            a.$list.on("keydown.slick", a.keyHandler);
        }
        if (a.options.focusOnSelect === true) {
            b(a.$slideTrack).children().on("click.slick", a.selectHandler);
        }
        b(window).on("orientationchange.slick.slick-" + a.instanceUid, b.proxy(a.orientationChange, a));
        b(window).on("resize.slick.slick-" + a.instanceUid, b.proxy(a.resize, a));
        b("[draggable!=true]", a.$slideTrack).on("dragstart", a.preventDefault);
        b(window).on("load.slick.slick-" + a.instanceUid, a.setPosition);
        b(a.setPosition);
    };
    a.prototype.initUI = function () {
        var a = this;
        if (a.options.arrows === true && a.slideCount > a.options.slidesToShow) {
            a.$prevArrow.show();
            a.$nextArrow.show();
        }
        if (a.options.dots === true && a.slideCount > a.options.slidesToShow) {
            a.$dots.show();
        }
    };
    a.prototype.keyHandler = function (a) {
        var b = this;
        if (!a.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
            if (a.keyCode === 37 && b.options.accessibility === true) {
                b.changeSlide({
                    data: {
                        message: b.options.rtl === true ? "next" : "previous"
                    }
                });
            } else if (a.keyCode === 39 && b.options.accessibility === true) {
                b.changeSlide({
                    data: {
                        message: b.options.rtl === true ? "previous" : "next"
                    }
                });
            }
        }
    };
    a.prototype.lazyLoad = function () {
        function c(a) {
            b("img[data-lazy]", a).each(function () {
                var a = b(this);
                var c = b(this).attr("data-lazy");
                var d = b(this).attr("data-srcset");
                var e = b(this).attr("data-sizes") || h.$slider.attr("data-sizes");
                var f = document.createElement("img");
                f.onload = function () {
                    a.animate({
                        opacity: 0
                    }, 100, function () {
                        if (d) {
                            a.attr("srcset", d);
                            if (e) {
                                a.attr("sizes", e);
                            }
                        }
                        a.attr("src", c).animate({
                            opacity: 1
                        }, 200, function () {
                            a.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
                        });
                        h.$slider.trigger("lazyLoaded", [h, a, c]);
                    });
                };
                f.onerror = function () {
                    a.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    h.$slider.trigger("lazyLoadError", [h, a, c]);
                };
                f.src = c;
            });
        }
        var e;
        var f;
        var g;
        var h = this;
        if (h.options.centerMode === true) {
            if (h.options.infinite === true) {
                g = (f = h.currentSlide + (h.options.slidesToShow / 2 + 1)) + h.options.slidesToShow + 2;
            } else {
                f = Math.max(0, h.currentSlide - (h.options.slidesToShow / 2 + 1));
                g = h.options.slidesToShow / 2 + 1 + 2 + h.currentSlide;
            }
        } else {
            f = h.options.infinite ? h.options.slidesToShow + h.currentSlide : h.currentSlide;
            g = Math.ceil(f + h.options.slidesToShow);
            if (h.options.fade === true) {
                if (f > 0) {
                    f--;
                }
                if (g <= h.slideCount) {
                    g++;
                }
            }
        }
        e = h.$slider.find(".slick-slide").slice(f, g);
        if (h.options.lazyLoad === "anticipated") {
            for (var i = f - 1, j = g, k = h.$slider.find(".slick-slide"), d = 0; d < h.options.slidesToScroll; d++) {
                if (i < 0) {
                    i = h.slideCount - 1;
                }
                e = (e = e.add(k.eq(i))).add(k.eq(j));
                i--;
                j++;
            }
        }
        c(e);
        if (h.slideCount <= h.options.slidesToShow) {
            c(h.$slider.find(".slick-slide"));
        } else if (h.currentSlide >= h.slideCount - h.options.slidesToShow) {
            c(h.$slider.find(".slick-cloned").slice(0, h.options.slidesToShow));
        } else if (h.currentSlide === 0) {
            c(h.$slider.find(".slick-cloned").slice(h.options.slidesToShow * -1));
        }
    };
    a.prototype.loadSlider = function () {
        var a = this;
        a.setPosition();
        a.$slideTrack.css({
            opacity: 1
        });
        a.$slider.removeClass("slick-loading");
        a.initUI();
        if (a.options.lazyLoad === "progressive") {
            a.progressiveLazyLoad();
        }
    };
    a.prototype.next = a.prototype.slickNext = function () {
        this.changeSlide({
            data: {
                message: "next"
            }
        });
    };
    a.prototype.orientationChange = function () {
        var a = this;
        a.checkResponsive();
        a.setPosition();
    };
    a.prototype.pause = a.prototype.slickPause = function () {
        var a = this;
        a.autoPlayClear();
        a.paused = true;
    };
    a.prototype.play = a.prototype.slickPlay = function () {
        var a = this;
        a.autoPlay();
        a.options.autoplay = true;
        a.paused = false;
        a.focussed = false;
        a.interrupted = false;
    };
    a.prototype.postSlide = function (a) {
        var c = this;
        if (!c.unslicked) {
            c.$slider.trigger("afterChange", [c, a]);
            c.animating = false;
            if (c.slideCount > c.options.slidesToShow) {
                c.setPosition();
            }
            c.swipeLeft = null;
            if (c.options.autoplay) {
                c.autoPlay();
            }
            if (c.options.accessibility === true) {
                c.initADA();
                if (c.options.focusOnChange) {
                    b(c.$slides.get(c.currentSlide)).attr("tabindex", 0).focus();
                }
            }
        }
    };
    a.prototype.prev = a.prototype.slickPrev = function () {
        this.changeSlide({
            data: {
                message: "previous"
            }
        });
    };
    a.prototype.preventDefault = function (a) {
        a.preventDefault();
    };
    a.prototype.progressiveLazyLoad = function (a) {
        a = a || 1;
        var c;
        var f;
        var g;
        var h;
        var i;
        var j = this;
        var k = b("img[data-lazy]", j.$slider);
        if (k.length) {
            c = k.first();
            f = c.attr("data-lazy");
            g = c.attr("data-srcset");
            h = c.attr("data-sizes") || j.$slider.attr("data-sizes");
            (i = document.createElement("img")).onload = function () {
                if (g) {
                    c.attr("srcset", g);
                    if (h) {
                        c.attr("sizes", h);
                    }
                }
                c.attr("src", f).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
                if (j.options.adaptiveHeight === true) {
                    j.setPosition();
                }
                j.$slider.trigger("lazyLoaded", [j, c, f]);
                j.progressiveLazyLoad();
            };
            i.onerror = function () {
                if (a < 3) {
                    // TOLOOK
                    setTimeout(function () {
                        j.progressiveLazyLoad(a + 1);
                    }, 500);
                } else {
                    c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
                    j.$slider.trigger("lazyLoadError", [j, c, f]);
                    j.progressiveLazyLoad();
                }
            };
            i.src = f;
        } else {
            j.$slider.trigger("allImagesLoaded", [j]);
        }
    };
    a.prototype.refresh = function (a) {
        var c;
        var d;
        var e = this;
        d = e.slideCount - e.options.slidesToShow;
        if (!e.options.infinite && e.currentSlide > d) {
            e.currentSlide = d;
        }
        if (e.slideCount <= e.options.slidesToShow) {
            e.currentSlide = 0;
        }
        c = e.currentSlide;
        e.destroy(true);
        b.extend(e, e.initials, {
            currentSlide: c
        });
        e.init();
        if (!a) {
            e.changeSlide({
                data: {
                    message: "index",
                    index: c
                }
            }, false);
        }
    };
    a.prototype.registerBreakpoints = function () {
        var a;
        var c;
        var d;
        var f = this;
        var g = f.options.responsive || null;
        if (b.type(g) === "array" && g.length) {
            f.respondTo = f.options.respondTo || "window";
            for (a in g) {
                d = f.breakpoints.length - 1;
                if (g.hasOwnProperty(a)) {
                    for (c = g[a].breakpoint; d >= 0;) {
                        if (f.breakpoints[d] && f.breakpoints[d] === c) {
                            f.breakpoints.splice(d, 1);
                        }
                        d--;
                    }
                    f.breakpoints.push(c);
                    f.breakpointSettings[c] = g[a].settings;
                }
            }
            f.breakpoints.sort(function (a, b) {
                if (f.options.mobileFirst) {
                    return a - b;
                } else {
                    return b - a;
                }
            });
        }
    };
    a.prototype.reinit = function () {
        var a = this;
        a.$slides = a.$slideTrack.children(a.options.slide).addClass("slick-slide");
        a.slideCount = a.$slides.length;
        if (a.currentSlide >= a.slideCount && a.currentSlide !== 0) {
            a.currentSlide = a.currentSlide - a.options.slidesToScroll;
        }
        if (a.slideCount <= a.options.slidesToShow) {
            a.currentSlide = 0;
        }
        a.registerBreakpoints();
        a.setProps();
        a.setupInfinite();
        a.buildArrows();
        a.updateArrows();
        a.initArrowEvents();
        a.buildDots();
        a.updateDots();
        a.initDotEvents();
        a.cleanUpSlideEvents();
        a.initSlideEvents();
        a.checkResponsive(false, true);
        if (a.options.focusOnSelect === true) {
            b(a.$slideTrack).children().on("click.slick", a.selectHandler);
        }
        a.setSlideClasses(typeof a.currentSlide == "number" ? a.currentSlide : 0);
        a.setPosition();
        a.focusHandler();
        a.paused = !a.options.autoplay;
        a.autoPlay();
        a.$slider.trigger("reInit", [a]);
    };
    a.prototype.resize = function () {
        var a = this;
        if (b(window).width() !== a.windowWidth) {
            clearTimeout(a.windowDelay);
            a.windowDelay = window.setTimeout(function () {
                a.windowWidth = b(window).width();
                a.checkResponsive();
                if (!a.unslicked) {
                    a.setPosition();
                }
            }, 50);
        }
    };
    a.prototype.removeSlide = a.prototype.slickRemove = function (a, b, c) {
        var d = this;
        a = typeof a == "boolean" ? (b = a) === true ? 0 : d.slideCount - 1 : b === true ? --a : a;
        if (d.slideCount < 1 || a < 0 || a > d.slideCount - 1) {
            return false;
        }
        d.unload();
        if (c === true) {
            d.$slideTrack.children().remove();
        } else {
            d.$slideTrack.children(this.options.slide).eq(a).remove();
        }
        d.$slides = d.$slideTrack.children(this.options.slide);
        d.$slideTrack.children(this.options.slide).detach();
        d.$slideTrack.append(d.$slides);
        d.$slidesCache = d.$slides;
        d.reinit();
    };
    a.prototype.setCSS = function (a) {
        var b;
        var c;
        var d = this;
        var f = {};
        if (d.options.rtl === true) {
            a = -a;
        }
        b = d.positionProp == "left" ? Math.ceil(a) + "px" : "0px";
        c = d.positionProp == "top" ? Math.ceil(a) + "px" : "0px";
        f[d.positionProp] = a;
        if (d.transformsEnabled === false) {
            d.$slideTrack.css(f);
        } else {
            f = {};
            if (d.cssTransitions === false) {
                f[d.animType] = "translate(" + b + ", " + c + ")";
                d.$slideTrack.css(f);
            } else {
                f[d.animType] = "translate3d(" + b + ", " + c + ", 0px)";
                d.$slideTrack.css(f);
            }
        }
    };
    a.prototype.setDimensions = function () {
        var a = this;
        if (a.options.vertical === false) {
            if (a.options.centerMode === true) {
                a.$list.css({
                    padding: "0px " + a.options.centerPadding
                });
            }
        } else {
            a.$list.height(a.$slides.first().outerHeight(true) * a.options.slidesToShow);
            if (a.options.centerMode === true) {
                a.$list.css({
                    padding: a.options.centerPadding + " 0px"
                });
            }
        }
        a.listWidth = a.$list.width();
        a.listHeight = a.$list.height();
        if (a.options.vertical === false && a.options.variableWidth === false) {
            a.slideWidth = Math.ceil(a.listWidth / a.options.slidesToShow);
            a.$slideTrack.width(Math.ceil(a.slideWidth * a.$slideTrack.children(".slick-slide").length));
        } else if (a.options.variableWidth === true) {
            a.$slideTrack.width(a.slideCount * 5000);
        } else {
            a.slideWidth = Math.ceil(a.listWidth);
            a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(true) * a.$slideTrack.children(".slick-slide").length));
        }
        var b = a.$slides.first().outerWidth(true) - a.$slides.first().width();
        if (a.options.variableWidth === false) {
            a.$slideTrack.children(".slick-slide").width(a.slideWidth - b);
        }
    };
    a.prototype.setFade = function () {
        var a;
        var c = this;
        c.$slides.each(function (d, e) {
            a = c.slideWidth * d * -1;
            if (c.options.rtl === true) {
                b(e).css({
                    position: "relative",
                    right: a,
                    top: 0,
                    zIndex: c.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                b(e).css({
                    position: "relative",
                    left: a,
                    top: 0,
                    zIndex: c.options.zIndex - 2,
                    opacity: 0
                });
            }
        });
        c.$slides.eq(c.currentSlide).css({
            zIndex: c.options.zIndex - 1,
            opacity: 1
        });
    };
    a.prototype.setHeight = function () {
        var a = this;
        if (a.options.slidesToShow === 1 && a.options.adaptiveHeight === true && a.options.vertical === false) {
            var b = a.$slides.eq(a.currentSlide).outerHeight(true);
            a.$list.css("height", b);
        }
    };
    a.prototype.setOption = a.prototype.slickSetOption = function () {
        var a;
        var c;
        var d;
        var f;
        var g;
        var h = this;
        var i = false;
        if (b.type(arguments[0]) === "object") {
            d = arguments[0];
            i = arguments[1];
            g = "multiple";
        } else if (b.type(arguments[0]) === "string") {
            d = arguments[0];
            f = arguments[1];
            i = arguments[2];
            if (arguments[0] === "responsive" && b.type(arguments[1]) === "array") {
                g = "responsive";
            } else if (arguments[1] !== undefined) {
                g = "single";
            }
        }
        if (g === "single") {
            h.options[d] = f;
        } else if (g === "multiple") {
            b.each(d, function (a, b) {
                h.options[a] = b;
            });
        } else if (g === "responsive") {
            for (c in f) {
                if (b.type(h.options.responsive) !== "array") {
                    h.options.responsive = [f[c]];
                } else {
                    for (a = h.options.responsive.length - 1; a >= 0;) {
                        if (h.options.responsive[a].breakpoint === f[c].breakpoint) {
                            h.options.responsive.splice(a, 1);
                        }
                        a--;
                    }
                    h.options.responsive.push(f[c]);
                }
            }
        }
        if (i) {
            h.unload();
            h.reinit();
        }
    };
    a.prototype.setPosition = function () {
        var a = this;
        a.setDimensions();
        a.setHeight();
        if (a.options.fade === false) {
            a.setCSS(a.getLeft(a.currentSlide));
        } else {
            a.setFade();
        }
        a.$slider.trigger("setPosition", [a]);
    };
    a.prototype.setProps = function () {
        var a = this;
        var b = document.body.style;
        a.positionProp = a.options.vertical === true ? "top" : "left";
        if (a.positionProp === "top") {
            a.$slider.addClass("slick-vertical");
        } else {
            a.$slider.removeClass("slick-vertical");
        }
        if (!(b.WebkitTransition === undefined && b.MozTransition === undefined && b.msTransition === undefined)) {
            if (a.options.useCSS === true) {
                a.cssTransitions = true;
            }
        }
        if (a.options.fade) {
            if (typeof a.options.zIndex == "number") {
                if (a.options.zIndex < 3) {
                    a.options.zIndex = 3;
                }
            } else {
                a.options.zIndex = a.defaults.zIndex;
            }
        }
        if (b.OTransform !== undefined) {
            a.animType = "OTransform";
            a.transformType = "-o-transform";
            a.transitionType = "OTransition";
            if (b.perspectiveProperty === undefined && b.webkitPerspective === undefined) {
                a.animType = false;
            }
        }
        if (b.MozTransform !== undefined) {
            a.animType = "MozTransform";
            a.transformType = "-moz-transform";
            a.transitionType = "MozTransition";
            if (b.perspectiveProperty === undefined && b.MozPerspective === undefined) {
                a.animType = false;
            }
        }
        if (b.webkitTransform !== undefined) {
            a.animType = "webkitTransform";
            a.transformType = "-webkit-transform";
            a.transitionType = "webkitTransition";
            if (b.perspectiveProperty === undefined && b.webkitPerspective === undefined) {
                a.animType = false;
            }
        }
        if (b.msTransform !== undefined) {
            a.animType = "msTransform";
            a.transformType = "-ms-transform";
            a.transitionType = "msTransition";
            if (b.msTransform === undefined) {
                a.animType = false;
            }
        }
        if (b.transform !== undefined && a.animType !== false) {
            a.animType = "transform";
            a.transformType = "transform";
            a.transitionType = "transition";
        }
        a.transformsEnabled = a.options.useTransform && a.animType !== null && a.animType !== false;
    };
    a.prototype.setSlideClasses = function (a) {
        var b;
        var c;
        var d;
        var f;
        var g = this;
        c = g.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true");
        g.$slides.eq(a).addClass("slick-current");
        if (g.options.centerMode === true) {
            var h = g.options.slidesToShow % 2 == 0 ? 1 : 0;
            b = Math.floor(g.options.slidesToShow / 2);
            if (g.options.infinite === true) {
                if (a >= b && a <= g.slideCount - 1 - b) {
                    g.$slides.slice(a - b + h, a + b + 1).addClass("slick-active").attr("aria-hidden", "false");
                } else {
                    d = g.options.slidesToShow + a;
                    c.slice(d - b + 1 + h, d + b + 2).addClass("slick-active").attr("aria-hidden", "false");
                }
                if (a === 0) {
                    c.eq(c.length - 1 - g.options.slidesToShow).addClass("slick-center");
                } else if (a === g.slideCount - 1) {
                    c.eq(g.options.slidesToShow).addClass("slick-center");
                }
            }
            g.$slides.eq(a).addClass("slick-center");
        } else if (a >= 0 && a <= g.slideCount - g.options.slidesToShow) {
            g.$slides.slice(a, a + g.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
        } else if (c.length <= g.options.slidesToShow) {
            c.addClass("slick-active").attr("aria-hidden", "false");
        } else {
            f = g.slideCount % g.options.slidesToShow;
            d = g.options.infinite === true ? g.options.slidesToShow + a : a;
            if (g.options.slidesToShow == g.options.slidesToScroll && g.slideCount - a < g.options.slidesToShow) {
                c.slice(d - (g.options.slidesToShow - f), d + f).addClass("slick-active").attr("aria-hidden", "false");
            } else {
                c.slice(d, d + g.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
            }
        }
        if (!(g.options.lazyLoad !== "ondemand" && g.options.lazyLoad !== "anticipated")) {
            g.lazyLoad();
        }
    };
    a.prototype.setupInfinite = function () {
        var a;
        var c;
        var d;
        var f = this;
        if (f.options.fade === true) {
            f.options.centerMode = false;
        }
        if (f.options.infinite === true && f.options.fade === false && (c = null, f.slideCount > f.options.slidesToShow)) {
            d = f.options.centerMode === true ? f.options.slidesToShow + 1 : f.options.slidesToShow;
            a = f.slideCount;
            for (; a > f.slideCount - d; a -= 1) {
                c = a - 1;
                b(f.$slides[c]).clone(true).attr("id", "").attr("data-slick-index", c - f.slideCount).prependTo(f.$slideTrack).addClass("slick-cloned");
            }
            for (a = 0; a < d + f.slideCount; a += 1) {
                c = a;
                b(f.$slides[c]).clone(true).attr("id", "").attr("data-slick-index", c + f.slideCount).appendTo(f.$slideTrack).addClass("slick-cloned");
            }
            f.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
                b(this).attr("id", "");
            });
        }
    };
    a.prototype.interrupt = function (a) {
        var b = this;
        if (!a) {
            b.autoPlay();
        }
        b.interrupted = a;
    };
    a.prototype.selectHandler = function (a) {
        var c = this;
        var d = b(a.target).is(".slick-slide") ? b(a.target) : b(a.target).parents(".slick-slide");
        var e = parseInt(d.attr("data-slick-index"));
        if (!e) {
            e = 0;
        }
        if (c.slideCount <= c.options.slidesToShow) {
            c.slideHandler(e, false, true);
        } else {
            c.slideHandler(e);
        }
    };
    a.prototype.slideHandler = function (b, c, f) {
        var g;
        var h;
        var i;
        var j;
        var k;
        var m = null;
        var p = this;
        c = c || false;
        if (!(p.animating === true && p.options.waitForAnimate === true || p.options.fade === true && p.currentSlide === b)) {
            if (c === false) {
                p.asNavFor(b);
            }
            g = b;
            m = p.getLeft(g);
            j = p.getLeft(p.currentSlide);
            p.currentLeft = p.swipeLeft === null ? j : p.swipeLeft;
            if (p.options.infinite === false && p.options.centerMode === false && (b < 0 || b > p.getDotCount() * p.options.slidesToScroll)) {
                if (p.options.fade === false) {
                    g = p.currentSlide;
                    if (f !== true) {
                        p.animateSlide(j, function () {
                            p.postSlide(g);
                        });
                    } else {
                        p.postSlide(g);
                    }
                }
            } else if (p.options.infinite === false && p.options.centerMode === true && (b < 0 || b > p.slideCount - p.options.slidesToScroll)) {
                if (p.options.fade === false) {
                    g = p.currentSlide;
                    if (f !== true) {
                        p.animateSlide(j, function () {
                            p.postSlide(g);
                        });
                    } else {
                        p.postSlide(g);
                    }
                }
            } else {
                if (p.options.autoplay) {
                    clearInterval(p.autoPlayTimer);
                }
                h = g < 0 ? p.slideCount % p.options.slidesToScroll != 0 ? p.slideCount - p.slideCount % p.options.slidesToScroll : p.slideCount + g : g >= p.slideCount ? p.slideCount % p.options.slidesToScroll != 0 ? 0 : g - p.slideCount : g;
                p.animating = true;
                p.$slider.trigger("beforeChange", [p, p.currentSlide, h]);
                i = p.currentSlide;
                p.currentSlide = h;
                p.setSlideClasses(p.currentSlide);
                if (p.options.asNavFor && (k = (k = p.getNavTarget()).slick("getSlick")).slideCount <= k.options.slidesToShow) {
                    k.setSlideClasses(p.currentSlide);
                }
                p.updateDots();
                p.updateArrows();
                if (p.options.fade === true) {
                    if (f !== true) {
                        p.fadeSlideOut(i);
                        p.fadeSlide(h, function () {
                            p.postSlide(h);
                        });
                    } else {
                        p.postSlide(h);
                    }
                    p.animateHeight();
                    return;
                }
                if (f !== true) {
                    p.animateSlide(m, function () {
                        p.postSlide(h);
                    });
                } else {
                    p.postSlide(h);
                }
            }
        }
    };
    a.prototype.startLoad = function () {
        var a = this;
        if (a.options.arrows === true && a.slideCount > a.options.slidesToShow) {
            a.$prevArrow.hide();
            a.$nextArrow.hide();
        }
        if (a.options.dots === true && a.slideCount > a.options.slidesToShow) {
            a.$dots.hide();
        }
        a.$slider.addClass("slick-loading");
    };
    a.prototype.swipeDirection = function () {
        var a;
        var b;
        var c;
        var d;
        var f = this;
        a = f.touchObject.startX - f.touchObject.curX;
        b = f.touchObject.startY - f.touchObject.curY;
        c = Math.atan2(b, a);
        if ((d = Math.round(c * 180 / Math.PI)) < 0) {
            d = 360 - Math.abs(d);
        }
        if (d <= 45 && d >= 0) {
            if (f.options.rtl === false) {
                return "left";
            } else {
                return "right";
            }
        } else if (d <= 360 && d >= 315) {
            if (f.options.rtl === false) {
                return "left";
            } else {
                return "right";
            }
        } else if (d >= 135 && d <= 225) {
            if (f.options.rtl === false) {
                return "right";
            } else {
                return "left";
            }
        } else if (f.options.verticalSwiping === true) {
            if (d >= 35 && d <= 135) {
                return "down";
            } else {
                return "up";
            }
        } else {
            return "vertical";
        }
    };
    a.prototype.swipeEnd = function (a) {
        var b;
        var c;
        var d = this;
        d.dragging = false;
        d.swiping = false;
        if (d.scrolling) {
            d.scrolling = false;
            return false;
        }
        d.interrupted = false;
        d.shouldClick = !(d.touchObject.swipeLength > 10);
        if (d.touchObject.curX === undefined) {
            return false;
        }
        if (d.touchObject.edgeHit === true) {
            d.$slider.trigger("edge", [d, d.swipeDirection()]);
        }
        if (d.touchObject.swipeLength >= d.touchObject.minSwipe) {
            switch (c = d.swipeDirection()) {
                case "left":
                case "down":
                    b = d.options.swipeToSlide ? d.checkNavigable(d.currentSlide + d.getSlideCount()) : d.currentSlide + d.getSlideCount();
                    d.currentDirection = 0;
                    break;
                case "right":
                case "up":
                    b = d.options.swipeToSlide ? d.checkNavigable(d.currentSlide - d.getSlideCount()) : d.currentSlide - d.getSlideCount();
                    d.currentDirection = 1;
            }
            if (c != "vertical") {
                d.slideHandler(b);
                d.touchObject = {};
                d.$slider.trigger("swipe", [d, c]);
            }
        } else if (d.touchObject.startX !== d.touchObject.curX) {
            d.slideHandler(d.currentSlide);
            d.touchObject = {};
        }
    };
    a.prototype.swipeHandler = function (a) {
        var b = this;
        if (!(b.options.swipe === false || "ontouchend" in document && b.options.swipe === false || b.options.draggable === false && a.type.indexOf("mouse") !== -1)) {
            b.touchObject.fingerCount = a.originalEvent && a.originalEvent.touches !== undefined ? a.originalEvent.touches.length : 1;
            b.touchObject.minSwipe = b.listWidth / b.options.touchThreshold;
            if (b.options.verticalSwiping === true) {
                b.touchObject.minSwipe = b.listHeight / b.options.touchThreshold;
            }
            switch (a.data.action) {
                case "start":
                    b.swipeStart(a);
                    break;
                case "move":
                    b.swipeMove(a);
                    break;
                case "end":
                    b.swipeEnd(a);
            }
        }
    };
    a.prototype.swipeMove = function (a) {
        var b;
        var c;
        var d;
        var f;
        var g;
        var h;
        var i = this;
        g = a.originalEvent !== undefined ? a.originalEvent.touches : null;
        return !(!i.dragging || i.scrolling || g && g.length !== 1) && (b = i.getLeft(i.currentSlide), i.touchObject.curX = g !== undefined ? g[0].pageX : a.clientX, i.touchObject.curY = g !== undefined ? g[0].pageY : a.clientY, i.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(i.touchObject.curX - i.touchObject.startX, 2))), h = Math.round(Math.sqrt(Math.pow(i.touchObject.curY - i.touchObject.startY, 2))), !i.options.verticalSwiping && !i.swiping && h > 4 ? (i.scrolling = true, false) : (i.options.verticalSwiping === true && (i.touchObject.swipeLength = h), c = i.swipeDirection(), a.originalEvent !== undefined && i.touchObject.swipeLength > 4 && (i.swiping = true, a.preventDefault()), f = (i.options.rtl === false ? 1 : -1) * (i.touchObject.curX > i.touchObject.startX ? 1 : -1), i.options.verticalSwiping === true && (f = i.touchObject.curY > i.touchObject.startY ? 1 : -1), d = i.touchObject.swipeLength, i.touchObject.edgeHit = false, i.options.infinite === false && (i.currentSlide === 0 && c === "right" || i.currentSlide >= i.getDotCount() && c === "left") && (d = i.touchObject.swipeLength * i.options.edgeFriction, i.touchObject.edgeHit = true), i.options.vertical === false ? i.swipeLeft = b + d * f : i.swipeLeft = b + d * (i.$list.height() / i.listWidth) * f, i.options.verticalSwiping === true && (i.swipeLeft = b + d * f), i.options.fade !== true && i.options.touchMove !== false && (i.animating === true ? (i.swipeLeft = null, false) : void i.setCSS(i.swipeLeft))));
    };
    a.prototype.swipeStart = function (a) {
        var b;
        var c = this;
        c.interrupted = true;
        if (c.touchObject.fingerCount !== 1 || c.slideCount <= c.options.slidesToShow) {
            c.touchObject = {};
            return false;
        }
        if (a.originalEvent !== undefined && a.originalEvent.touches !== undefined) {
            b = a.originalEvent.touches[0];
        }
        c.touchObject.startX = c.touchObject.curX = b !== undefined ? b.pageX : a.clientX;
        c.touchObject.startY = c.touchObject.curY = b !== undefined ? b.pageY : a.clientY;
        c.dragging = true;
    };
    a.prototype.unfilterSlides = a.prototype.slickUnfilter = function () {
        var a = this;
        if (a.$slidesCache !== null) {
            a.unload();
            a.$slideTrack.children(this.options.slide).detach();
            a.$slidesCache.appendTo(a.$slideTrack);
            a.reinit();
        }
    };
    a.prototype.unload = function () {
        var a = this;
        b(".slick-cloned", a.$slider).remove();
        if (a.$dots) {
            a.$dots.remove();
        }
        if (a.$prevArrow && a.htmlExpr.test(a.options.prevArrow)) {
            a.$prevArrow.remove();
        }
        if (a.$nextArrow && a.htmlExpr.test(a.options.nextArrow)) {
            a.$nextArrow.remove();
        }
        a.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
    };
    a.prototype.unslick = function (a) {
        var b = this;
        b.$slider.trigger("unslick", [b, a]);
        b.destroy();
    };
    a.prototype.updateArrows = function () {
        var a = this;
        Math.floor(a.options.slidesToShow / 2);
        if (a.options.arrows === true && a.slideCount > a.options.slidesToShow && !a.options.infinite) {
            a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            if (a.currentSlide === 0) {
                a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else if (a.currentSlide >= a.slideCount - a.options.slidesToShow && a.options.centerMode === false) {
                a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else if (a.currentSlide >= a.slideCount - 1 && a.options.centerMode === true) {
                a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            }
        }
    };
    a.prototype.updateDots = function () {
        var a = this;
        if (a.$dots !== null) {
            a.$dots.find("li").removeClass("slick-active").end();
            a.$dots.find("li").eq(Math.floor(a.currentSlide / a.options.slidesToScroll)).addClass("slick-active");
        }
    };
    a.prototype.visibility = function () {
        var a = this;
        if (a.options.autoplay) {
            if (document[a.hidden]) {
                a.interrupted = true;
            } else {
                a.interrupted = false;
            }
        }
    };
    b.fn.slick = function () {
        var b;
        var c;
        var d = this;
        var e = arguments[0];
        var f = Array.prototype.slice.call(arguments, 1);
        var g = d.length;
        for (b = 0; b < g; b++) {
            if (typeof e == "object" || e === undefined) {
                d[b].slick = new a(d[b], e);
            } else {
                c = d[b].slick[e].apply(d[b].slick, f);
            }
            if (c !== undefined) {
                return c;
            }
        }
        return d;
    };
});