(function () {
    const ID = 'cloudplugins'
    const TITLE = '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤'

    /** –†–∞–±–æ—Ç–∞ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏ –≤ Storage */
    function getPlugins() {
        return Lampa.Storage.get('plugins', [])
    }

    function savePlugins(list) {
        Lampa.Storage.set('plugins', list)
    }

    function isInstalled(url) {
        return getPlugins().some(p => p.url === url && p.status === 1)
    }

    function installPlugin(url) {
        let list = getPlugins()
        const idx = list.findIndex(p => p.url === url)
        if (idx === -1) list.push({ url, status: 1 })
        else list[idx].status = 1
        savePlugins(list)
        Lampa.Utils.putScript(url, () => Lampa.Noty.show('‚úÖ –ü–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
    }

    function removePlugin(url) {
        let list = getPlugins()
        const idx = list.findIndex(p => p.url === url)
        if (idx !== -1) list[idx].status = 0
        savePlugins(list)
        Lampa.Noty.show('‚ùå –ü–ª–∞–≥–∏–Ω —É–¥–∞–ª—ë–Ω')
    }

    /** –≠–∫—Ä–∞–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π */
    function RootScreen(object) {
        const scroll = new Lampa.Scroll({ mask: true, over: true })
        const html = $('<div class="cloudplugins-root"><div class="cloudplugins-body"></div></div>')
        const body = html.find('.cloudplugins-body')
        let items = []

        const categories = [
            { id: 'interface', name: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', icon: 'üñ•Ô∏è' },
            { id: 'online', name: '–û–Ω–ª–∞–π–Ω', icon: 'üåê' },
            { id: 'tv', name: '–¢–í', icon: 'üì∫' },
            { id: 'torrent', name: '–¢–æ—Ä—Ä–µ–Ω—Ç—ã', icon: 'üì•' },
            { id: 'radio', name: '–†–∞–¥–∏–æ', icon: 'üìª' },
            { id: 'adult', name: '18+', icon: 'üîû' }
        ]

        this.create = () => {
            body.append(scroll.render(true))

            categories.forEach(cat => {
                const el = $(`
          <div class="selector" style="padding:1em; margin:0.5em; background:#383838; border-radius:0.6em; display:flex; gap:0.6em; align-items:center;">
            <div style="font-size:1.3em">${cat.icon}</div>
            <div style="font-size:1.1em; color:#fff">${cat.name}</div>
          </div>
        `)
                el.on('hover:enter', () => {
                    Lampa.Activity.push({ title: cat.name, component: ID + '_category', category: cat.id })
                })
                el.on('hover:focus', () => scroll.update(el))
                scroll.append(el)
                items.push(el)
            })

            this.activity.toggle()
            return this.render()
        }

        this.start = () => {
            Lampa.Controller.add(ID, {
                toggle() {
                    Lampa.Controller.collectionSet(scroll.render())
                    Lampa.Controller.collectionFocus(items[0]?.[0] || false, scroll.render())
                },
                back: this.back,
                up() { Navigator.move('up') },
                down() { Navigator.move('down') },
                left() { if (Navigator.canmove('left')) Navigator.move('left'); else Lampa.Controller.toggle('menu') },
                right() { Navigator.move('right') }
            })
            Lampa.Controller.toggle(ID)
        }

        this.back = () => Lampa.Activity.backward()
        this.render = () => html
        this.destroy = () => { scroll.destroy(); html.remove(); }
    }

    /** –≠–∫—Ä–∞–Ω –ø–ª–∞–≥–∏–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
    function CategoryScreen(object) {
        const scroll = new Lampa.Scroll({ mask: true, over: true })
        const html = $('<div class="cloudplugins-category"><div class="cloudplugins-body"></div></div>')
        const body = html.find('.cloudplugins-body')
        let items = []

        // –ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏ —Å–≤–æ–∏–º–∏)
        const plugins = [
            { name: 'Plugin A', url: 'https://example.com/pluginA.js' },
            { name: 'Plugin B', url: 'https://example.com/pluginB.js' }
        ]

        this.create = () => {
            body.append(scroll.render(true))

            plugins.forEach(pl => {
                const el = $(`
          <div class="selector" style="padding:1em; margin:0.5em; background:#2e2e2e; border-radius:0.6em;">
            <div style="font-size:1.1em; color:#fff; margin-bottom:0.5em">${pl.name}</div>
            <div style="display:flex; gap:1em;">
              <div class="cloudplugins-btn" style="background:#ff9800; color:#000; padding:0.4em 1em; border-radius:0.5em; font-weight:bold; cursor:pointer;">
                ${isInstalled(pl.url) ? '–£–¥–∞–ª–∏—Ç—å' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}
              </div>
            </div>
          </div>
        `)

                const btn = el.find('.cloudplugins-btn')
                btn.on('hover:enter', () => {
                    if (isInstalled(pl.url)) removePlugin(pl.url)
                    else installPlugin(pl.url)
                    btn.text(isInstalled(pl.url) ? '–£–¥–∞–ª–∏—Ç—å' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
                })

                el.on('hover:focus', () => scroll.update(el))
                scroll.append(el)
                items.push(el)
            })

            this.activity.toggle()
            return this.render()
        }

        this.start = () => {
            Lampa.Controller.add(ID + '_cat', {
                toggle() {
                    Lampa.Controller.collectionSet(scroll.render())
                    Lampa.Controller.collectionFocus(items[0]?.[0] || false, scroll.render())
                },
                back: this.back,
                up() { Navigator.move('up') },
                down() { Navigator.move('down') },
                left() { if (Navigator.canmove('left')) Navigator.move('left'); else Lampa.Controller.toggle('menu') },
                right() { Navigator.move('right') }
            })
            Lampa.Controller.toggle(ID + '_cat')
        }

        this.back = () => Lampa.Activity.backward()
        this.render = () => html
        this.destroy = () => { scroll.destroy(); html.remove(); }
    }

    /** –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */
    function addSettings() {
        Lampa.SettingsApi.addComponent({
            component: ID,
            name: TITLE,
            icon: 'üß©'
        })

        Lampa.SettingsApi.addParam({
            component: ID,
            param: { name: 'open', type: 'button' },
            field: { name: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä' },
            onChange: () => {
                Lampa.Activity.push({ title: TITLE, component: ID })
            }
        })
    }

    function init() {
        if (!window.Lampa) return
        Lampa.Component.add(ID, RootScreen)
        Lampa.Component.add(ID + '_category', CategoryScreen)
        addSettings()

        // –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        getPlugins().forEach(p => {
            if (p.status) Lampa.Utils.putScript(p.url)
        })
    }

    if (window.appready) init()
    else Lampa.Listener.follow('app', (e) => { if (e.type === 'ready') init() })
})()
